{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amank\\\\Downloads\\\\New folder\\\\podfinance - Copy\\\\mern-finance\\\\src\\\\components\\\\finance-list.component.js\",\n  _s = $RefreshSig$();\nimport { Line } from 'react-chartjs-2';\nimport React, { useEffect, useState } from 'react';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables); // Register chart.js components\n\nconst FinanceList = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [weatherSummary, setWeatherSummary] = useState(null);\n  const [temperatureData, setTemperatureData] = useState([]);\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        const response = await fetch('https://api.openweathermap.org/data/2.5/weather?q=London&appid=485bc00cbf8fd5eb3dc717143b834c52');\n        const data = await response.json();\n        console.log(data);\n        setWeatherData(data);\n        const dailySummary = calculateDailySummary(data);\n        setWeatherSummary(dailySummary);\n\n        // Prepare temperature data for chart\n        setTemperatureData(prev => [...prev, dailySummary.averageTemp]);\n\n        // Log after setting state\n        console.log(dailySummary); // This will show the correct summary\n      } catch (error) {\n        console.error('Error fetching weather data:', error);\n      }\n    };\n    fetchWeatherData();\n  }, []);\n  const calculateDailySummary = data => {\n    var _data$weather$;\n    if (!data || !data.main) return null;\n\n    // Example calculations, adjust as needed\n    const averageTemp = data.main.temp; // Current temperature from the response\n    const maxTemp = data.main.temp_max;\n    const minTemp = data.main.temp_min;\n    const humidity = data.main.humidity;\n    return {\n      averageTemp,\n      maxTemp,\n      minTemp,\n      humidity,\n      weatherDescription: ((_data$weather$ = data.weather[0]) === null || _data$weather$ === void 0 ? void 0 : _data$weather$.description) || 'No description'\n    };\n  };\n  useEffect(() => {\n    // Log the weather summary whenever it updates\n    if (weatherSummary) {\n      console.log('Updated Weather Summary:', weatherSummary);\n    }\n  }, [weatherSummary]);\n\n  // Prepare chart data\n  const chartData = {\n    labels: temperatureData.map((_, index) => `Day ${index + 1}`),\n    // Label for each day\n    datasets: [{\n      label: 'Average Temperature (°K)',\n      data: temperatureData,\n      fill: false,\n      backgroundColor: 'rgba(75, 192, 192, 0.6)',\n      borderColor: 'rgba(75, 192, 192, 1)'\n    }]\n  };\n  const options = {\n    responsive: true,\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Temperature (°K)'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \"Weather in London\"), weatherSummary ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, \"Average Temperature: \", weatherSummary.averageTemp, \"\\xB0K\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \"Max Temperature: \", weatherSummary.maxTemp, \"\\xB0K\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, \"Min Temperature: \", weatherSummary.minTemp, \"\\xB0K\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"Humidity: \", weatherSummary.humidity, \"%\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, \"Condition: \", weatherSummary.weatherDescription)) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Loading weather data...\"), temperatureData.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, \"Temperature Trends\"), /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  })));\n};\n_s(FinanceList, \"qlUTe5Z40QOn0pComO4trH6IUsE=\");\n_c = FinanceList;\nexport default FinanceList;\nvar _c;\n$RefreshReg$(_c, \"FinanceList\");","map":{"version":3,"names":["Line","React","useEffect","useState","Chart","registerables","register","FinanceList","_s","weatherData","setWeatherData","weatherSummary","setWeatherSummary","temperatureData","setTemperatureData","fetchWeatherData","response","fetch","data","json","console","log","dailySummary","calculateDailySummary","prev","averageTemp","error","_data$weather$","main","temp","maxTemp","temp_max","minTemp","temp_min","humidity","weatherDescription","weather","description","chartData","labels","map","_","index","datasets","label","fill","backgroundColor","borderColor","options","responsive","scales","y","beginAtZero","title","display","text","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["C:/Users/amank/Downloads/New folder/podfinance - Copy/mern-finance/src/components/finance-list.component.js"],"sourcesContent":["import { Line } from 'react-chartjs-2';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\nChart.register(...registerables); // Register chart.js components\r\n\r\nconst FinanceList = () => {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [weatherSummary, setWeatherSummary] = useState(null);\r\n  const [temperatureData, setTemperatureData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchWeatherData = async () => {\r\n      try {\r\n        const response = await fetch('https://api.openweathermap.org/data/2.5/weather?q=London&appid=485bc00cbf8fd5eb3dc717143b834c52');\r\n        const data = await response.json();\r\n\r\n        console.log(data);\r\n        setWeatherData(data);\r\n        \r\n        const dailySummary = calculateDailySummary(data);\r\n        setWeatherSummary(dailySummary);\r\n\r\n        // Prepare temperature data for chart\r\n        setTemperatureData((prev) => [...prev, dailySummary.averageTemp]);\r\n        \r\n        // Log after setting state\r\n        console.log(dailySummary); // This will show the correct summary\r\n      } catch (error) {\r\n        console.error('Error fetching weather data:', error);\r\n      }\r\n    };\r\n\r\n    fetchWeatherData();\r\n  }, []);\r\n\r\n  const calculateDailySummary = (data) => {\r\n    if (!data || !data.main) return null;\r\n\r\n    // Example calculations, adjust as needed\r\n    const averageTemp = data.main.temp; // Current temperature from the response\r\n    const maxTemp = data.main.temp_max;\r\n    const minTemp = data.main.temp_min;\r\n    const humidity = data.main.humidity;\r\n    \r\n    return {\r\n      averageTemp,\r\n      maxTemp,\r\n      minTemp,\r\n      humidity,\r\n      weatherDescription: data.weather[0]?.description || 'No description',\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Log the weather summary whenever it updates\r\n    if (weatherSummary) {\r\n      console.log('Updated Weather Summary:', weatherSummary);\r\n    }\r\n  }, [weatherSummary]);\r\n\r\n  // Prepare chart data\r\n  const chartData = {\r\n    labels: temperatureData.map((_, index) => `Day ${index + 1}`), // Label for each day\r\n    datasets: [\r\n      {\r\n        label: 'Average Temperature (°K)',\r\n        data: temperatureData,\r\n        fill: false,\r\n        backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        title: {\r\n          display: true,\r\n          text: 'Temperature (°K)',\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Weather in London</h1>\r\n      {weatherSummary ? (\r\n        <div>\r\n          <p>Average Temperature: {weatherSummary.averageTemp}°K</p>\r\n          <p>Max Temperature: {weatherSummary.maxTemp}°K</p>\r\n          <p>Min Temperature: {weatherSummary.minTemp}°K</p>\r\n          <p>Humidity: {weatherSummary.humidity}%</p>\r\n          <p>Condition: {weatherSummary.weatherDescription}</p>\r\n        </div>\r\n      ) : (\r\n        <p>Loading weather data...</p>\r\n      )}\r\n      {/* Chart Component */}\r\n      {temperatureData.length > 0 && (\r\n        <div>\r\n          <h2>Temperature Trends</h2>\r\n          <Line data={chartData} options={options} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FinanceList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
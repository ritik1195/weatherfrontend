{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amank\\\\Downloads\\\\New folder\\\\podfinance - Copy\\\\mern-finance\\\\src\\\\components\\\\finance-list.component.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Bar, Line, Pie } from 'react-chartjs-2';\nimport { Chart, registerables, CategoryScale, LinearScale } from 'chart.js';\nChart.register(...registerables); // Registers all components\nChart.register(CategoryScale, LinearScale); // Register specific scales\n\nconst FinanceList = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [filter, setFilter] = useState('all');\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    fetchStockData();\n  }, []);\n  const fetchStockData = async () => {\n    try {\n      const response = await fetch('http://35.238.242.36:5000/stocks/');\n      const data = await response.json();\n      setStockData(data);\n      prepareChartData(data);\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n    }\n  };\n  const prepareChartData = stockData => {\n    // ... Your data processing logic\n\n    const labels = filteredData.map(row => new Date(row.Date).toLocaleDateString());\n    const openPrices = filteredData.map(row => row.Open);\n    const closePrices = filteredData.map(row => row.Close);\n    const barData = {\n      labels,\n      datasets: [{\n        label: 'Open Prices',\n        data: openPrices,\n        backgroundColor: 'rgba(75, 192, 192, 0.6)',\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 1\n      }]\n    };\n    const lineData = {\n      labels,\n      datasets: [{\n        label: 'Close Prices',\n        data: closePrices,\n        fill: false,\n        backgroundColor: 'rgba(153, 102, 255, 0.6)',\n        borderColor: 'rgba(153, 102, 255, 1)'\n      }]\n    };\n    setChartData({\n      barData,\n      lineData\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, chartData ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"Bar Chart - Open Prices\"), /*#__PURE__*/React.createElement(Bar, {\n    data: chartData.barData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"Line Chart - Close Prices\"), /*#__PURE__*/React.createElement(Line, {\n    data: chartData.lineData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Loading chart data...\"));\n};\n_s(FinanceList, \"LAv8HdwnVghOzjcAZ9ovJHaaWl4=\");\n_c = FinanceList;\nexport default FinanceList;\nvar _c;\n$RefreshReg$(_c, \"FinanceList\");","map":{"version":3,"names":["React","useState","useEffect","Bar","Line","Pie","Chart","registerables","CategoryScale","LinearScale","register","FinanceList","_s","chartData","setChartData","filter","setFilter","stockData","setStockData","fetchStockData","response","fetch","data","json","prepareChartData","error","console","labels","filteredData","map","row","Date","toLocaleDateString","openPrices","Open","closePrices","Close","barData","datasets","label","backgroundColor","borderColor","borderWidth","lineData","fill","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/amank/Downloads/New folder/podfinance - Copy/mern-finance/src/components/finance-list.component.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Bar, Line, Pie } from 'react-chartjs-2';\r\nimport { Chart, registerables, CategoryScale, LinearScale } from 'chart.js';\r\n\r\nChart.register(...registerables); // Registers all components\r\nChart.register(CategoryScale, LinearScale); // Register specific scales\r\n\r\nconst FinanceList = () => {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [filter, setFilter] = useState('all');\r\n  const [stockData, setStockData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchStockData();\r\n  }, []);\r\n\r\n  const fetchStockData = async () => {\r\n    try {\r\n      const response = await fetch('http://35.238.242.36:5000/stocks/');\r\n      const data = await response.json();\r\n      setStockData(data);\r\n      prepareChartData(data);\r\n    } catch (error) {\r\n      console.error('Error fetching stock data:', error);\r\n    }\r\n  };\r\n\r\n  const prepareChartData = (stockData) => {\r\n    // ... Your data processing logic\r\n\r\n    const labels = filteredData.map((row) => new Date(row.Date).toLocaleDateString());\r\n    const openPrices = filteredData.map((row) => row.Open);\r\n    const closePrices = filteredData.map((row) => row.Close);\r\n\r\n    const barData = {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'Open Prices',\r\n          data: openPrices,\r\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n          borderColor: 'rgba(75, 192, 192, 1)',\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n\r\n    const lineData = {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'Close Prices',\r\n          data: closePrices,\r\n          fill: false,\r\n          backgroundColor: 'rgba(153, 102, 255, 0.6)',\r\n          borderColor: 'rgba(153, 102, 255, 1)',\r\n        },\r\n      ],\r\n    };\r\n\r\n    setChartData({ barData, lineData });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {chartData ? (\r\n        <div>\r\n          <h2>Bar Chart - Open Prices</h2>\r\n          <Bar data={chartData.barData} />\r\n          <h2>Line Chart - Close Prices</h2>\r\n          <Line data={chartData.lineData} />\r\n        </div>\r\n      ) : (\r\n        <p>Loading chart data...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FinanceList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
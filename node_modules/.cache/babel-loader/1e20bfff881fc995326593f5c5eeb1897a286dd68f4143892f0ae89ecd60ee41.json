{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amank\\\\Downloads\\\\New folder\\\\podfinance - Copy\\\\mern-finance\\\\src\\\\components\\\\weather.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nconst Weather = X => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [weatherSummary, setWeatherSummary] = useState(null);\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        let response = '';\n        if (x == 'delhi') {\n          response = await fetch('https://api.openweathermap.org/data/2.5/delhi?q=London&appid=485bc00cbf8fd5eb3dc717143b834c52');\n        } else if (x == 'mumbai') {\n          response = await fetch('https://api.openweathermap.org/data/2.5/delhi?q=mumbai&appid=485bc00cbf8fd5eb3dc717143b834c52');\n        }\n        const data = await response.json();\n        setWeatherData(data);\n        const dailySummary = calculateDailySummary(data);\n        setWeatherSummary(dailySummary);\n\n        // Log after setting state\n        console.log(dailySummary); // This will show the correct summary\n      } catch (error) {\n        console.error('Error fetching weather data:', error);\n      }\n    };\n    fetchWeatherData();\n  }, []);\n  const calculateDailySummary = data => {\n    var _data$weather$;\n    if (!data || !data.main) return null;\n\n    // Example calculations, adjust as needed\n    const averageTemp = data.main.temp; // Current temperature from the response\n    const maxTemp = data.main.temp_max;\n    const minTemp = data.main.temp_min;\n    const humidity = data.main.humidity;\n    return {\n      averageTemp,\n      maxTemp,\n      minTemp,\n      humidity,\n      weatherDescription: ((_data$weather$ = data.weather[0]) === null || _data$weather$ === void 0 ? void 0 : _data$weather$.description) || 'No description'\n    };\n  };\n  useEffect(() => {\n    // Log the weather summary whenever it updates\n    if (weatherSummary) {\n      console.log('Updated Weather Summary:', weatherSummary);\n    }\n  }, [weatherSummary]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"Weather in London\"), weatherSummary ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, \"Average Temperature: \", weatherSummary.averageTemp, \"\\xB0K\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, \"Max Temperature: \", weatherSummary.maxTemp, \"\\xB0K\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"Min Temperature: \", weatherSummary.minTemp, \"\\xB0K\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"Humidity: \", weatherSummary.humidity, \"%\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"Condition: \", weatherSummary.weatherDescription)) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"Loading weather data...\"));\n};\n_s(Weather, \"lCTHIlfwGzmJNDmpXLJqkmm7DaM=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useEffect","useState","Weather","X","_s","weatherData","setWeatherData","weatherSummary","setWeatherSummary","fetchWeatherData","response","x","fetch","data","json","dailySummary","calculateDailySummary","console","log","error","_data$weather$","main","averageTemp","temp","maxTemp","temp_max","minTemp","temp_min","humidity","weatherDescription","weather","description","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/amank/Downloads/New folder/podfinance - Copy/mern-finance/src/components/weather.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst Weather = (X) => {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [weatherSummary, setWeatherSummary] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchWeatherData = async () => {\r\n      try {\r\n        let response='';\r\n        if(x=='delhi')\r\n        {\r\n           response = await fetch('https://api.openweathermap.org/data/2.5/delhi?q=London&appid=485bc00cbf8fd5eb3dc717143b834c52');\r\n        }\r\n        else if(x=='mumbai')\r\n        {\r\n\r\n            response = await fetch('https://api.openweathermap.org/data/2.5/delhi?q=mumbai&appid=485bc00cbf8fd5eb3dc717143b834c52');\r\n        }\r\n        const data = await response.json();\r\n        setWeatherData(data);\r\n        \r\n        const dailySummary = calculateDailySummary(data);\r\n        setWeatherSummary(dailySummary);\r\n        \r\n        // Log after setting state\r\n        console.log(dailySummary); // This will show the correct summary\r\n      } catch (error) {\r\n        console.error('Error fetching weather data:', error);\r\n      }\r\n    };\r\n\r\n    fetchWeatherData();\r\n  }, []);\r\n\r\n  const calculateDailySummary = (data) => {\r\n    if (!data || !data.main) return null;\r\n\r\n    // Example calculations, adjust as needed\r\n    const averageTemp = data.main.temp; // Current temperature from the response\r\n    const maxTemp = data.main.temp_max;\r\n    const minTemp = data.main.temp_min;\r\n    const humidity = data.main.humidity;\r\n    \r\n    return {\r\n      averageTemp,\r\n      maxTemp,\r\n      minTemp,\r\n      humidity,\r\n      weatherDescription: data.weather[0]?.description || 'No description',\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Log the weather summary whenever it updates\r\n    if (weatherSummary) {\r\n      console.log('Updated Weather Summary:', weatherSummary);\r\n    }\r\n  }, [weatherSummary]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Weather in London</h1>\r\n      {weatherSummary ? (\r\n        <div>\r\n          <p>Average Temperature: {weatherSummary.averageTemp}°K</p>\r\n          <p>Max Temperature: {weatherSummary.maxTemp}°K</p>\r\n          <p>Min Temperature: {weatherSummary.minTemp}°K</p>\r\n          <p>Humidity: {weatherSummary.humidity}%</p>\r\n          <p>Condition: {weatherSummary.weatherDescription}</p>\r\n        </div>\r\n      ) : (\r\n        <p>Loading weather data...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}